// Вопросы

// 1
// Вопрос: Что произойдет при копировании объекта?
// Ответ:
// let user = { name: "Иван" };

// let admin = user; // копируется ссылка

// admin.name = 'Петя'; // изменено по ссылке из переменной "admin"

// alert(user.name); // 'Петя', изменения видны по ссылке из переменной "user"

// 2
// Вопрос: В каком случае два объекта равны?
// Ответ: Если это один и тот же объект

// 3
// Вопрос: Равны ли {} === {}?
// Ответ: false

// 4
// Вопрос: Как скопировать объект?
// Ответ: Object.assign(dest, [src1, src2, src3...])
// let user = { name: "Иван" };

// let permissions1 = { canView: true };
// let permissions2 = { canEdit: true };

// копируем все свойства из permissions1 и permissions2 в user
// Object.assign(user, permissions1, permissions2);

// теперь user = { name: "Иван", canView: true, canEdit: true }

// let user = {
//     name: "Иван",
//     age: 30
//   };

//   let clone = Object.assign({}, user);

// 1
// Вопрос: Как скопировать объект с вложенными объектами?
// Ответ:
// Чтобы исправить это, мы должны в цикле клонирования делать проверку, не является ли значение user[key] объектом, и если это так – скопировать и его структуру тоже. Это называется «глубокое клонирование».

// Мы можем реализовать глубокое клонирование, используя рекурсию. Или, чтобы не изобретать велосипед, использовать готовую реализацию — метод _.cloneDeep(obj) из JavaScript-библиотеки lodash.
